#!/usr/bin/env python3

# Script that starts a quick optimization from the provided geometry
import os
import argparse

from cclib.io import ccread

from job_queue import SubmitJob
from more_itertools import peekable

parser = argparse.ArgumentParser(description='Run a quick geometry optimization.')
parser.add_argument('-i', '--input', help='The file from which to get the geometry.',
                    type=str, default='output.dat')
parser.add_argument('-m', '--method', help='The method to use',
                    type=str, default='HF-3C')
parser.add_argument('-f', '--numerical_freqs', help='Run numerical frequencies.',
                    action='store_true', default=False)
parser.add_argument('-a', '--analytical_freqs', help="Run frequencies.",
                    action='store_true', default=False)
parser.add_argument('-d', '--debug', help="Generate but don't submit the optimization.",
                    action='store_true', default=False)
parser.add_argument('-q', '--queue', help='Which queue to select (default is used if not specified).',
                    type=str, default=None)
parser.add_argument('-p', '--program', help='Which program to use.',
                    type=str, default='orca')

args = parser.parse_args()

method = ' '.join(args.method.split('/'))
name = '_'.join(args.method.split('/'))

charge = 0
multiplicity = 1
if args.input.split('.')[-1] == 'xyz':
    with open(args.input) as f:
        f = peekable(f)
        # If starting with the number of atoms
        if len(f.peek().split()) == 1:
            next(f)
            next(f)

        val_form = '    {:<2}' + '  {:> 10.7f}'*3 + '\n'
        geom = ''
        for line in f:
            atom, x, y, z, *other = line.split()
            geom += val_form.format(atom, float(x), float(y), float(z))
    geom = geom[:-1]
else:
    data = ccread(args.input)
    # Strip the number of atoms and comment lines
    geom = '    ' + '\n    '.join(data.writexyz().splitlines()[2:])
    charge = data.charge
    multiplicity = data.mult


if args.program.lower() == 'orca':
    tight = ''
    freqs = ''
    if args.numerical_freqs and args.analytical_freqs:
        raise ValueError('Cannot run numerical and analytic frequencies at the same time.')
    elif args.numerical_freqs:
        freqs = '! NumFreq\n'
        tight = 'Tight'
    elif args.analytical_freqs:
        freqs = '! AnFreq\n'
        tight = 'Tight'

    input_file = f"""\
%pal nprocs 8 end

! {tight}Opt {method}
! KDIIS
{freqs}
% scf maxiter 1000 end

* xyz {charge} {multiplicity}
{geom}
*"""

elif args.program == 'psi4':
    freqs = f"freq('{method}')"

    input_file = f'''\
molecule {{
    {charge} {multiplicity}
{geom}
}}

opt('method')
{freqs}
'''

else:
    raise ValueError(f'{args.program} is not yet supported.')


os.makedirs(args.method, exist_ok=False)
with open(f'{name}/input.dat', 'w') as f:
    f.write(input_file)

options = {
    'debug': args.debug,
}
if args.queue is not None:
    options['queue'] = args.queue

cwd = os.getcwd()
os.chdir(name)
job = SubmitJob(options)
job.submit()
os.chdir(cwd)
