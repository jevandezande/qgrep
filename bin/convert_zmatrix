#!/usr/bin/env python3

# Script that takes an output file and writes a proper zmatrix or the reverse if
# already proper

import argparse
import sys
sys.path.insert(0, '../')

from qgrep.helper import read
from qgrep.orca import convert_zmatrix, convert_to_orca_zmatrix


parser = argparse.ArgumentParser(description='Converts the last zmatrix to aproper zmatrix or the reverse if already proper.')
parser.add_argument('-i', '--input', help='The file to be read.', type=str,
                    default='output.dat')
parser.add_argument('-o', '--output', help='Where to output the geometry.',
                    type=str, default='ZMAT')
parser.add_argument('-u', '--units', help='Units to output the geometry in.',
                    type=str, default='angstrom')

args = parser.parse_args()

# Read in the file
lines, program = read(args.input)


def write(zmat):
    # Simple function to write a zmatrix to file
    with open(args.output, 'w') as f:
        for line in zmat:
            f.write('\t'.join(line) + '\n')

if program == 'orca':
    write(convert_zmatrix(lines, args.units))
elif program == 'zmatrix':
    # If already a proper zmatrix, convert to orca style
    # Skip the first two line if they are a header
    if lines[0] == '#ZMATRIX\n':
        lines = lines[2:]
    write(convert_to_orca_zmatrix(lines))
else:
    print("Not yet supported")

