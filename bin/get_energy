#!/usr/bin/env python3

# Script that takes an output file and gets the last energy of specified type
import os
import glob
import argparse
import numpy as np

from cclib.io import ccread
from cclib.parser.utils import convertor

from natsort import natsorted

parser = argparse.ArgumentParser(description='Get the energy from output file.')
parser.add_argument('-i', '--input', help='The file(s) to be read (accepts *).',
                    type=str, nargs='+', default=['output.dat'])
parser.add_argument('-t', '--energy_type', help='Output the specified energy.',
                    type=str, default='scf')
parser.add_argument('-u', '--units', help='Units to output energy in.',
                    type=str, default='hartree')
parser.add_argument('-l', '--list', help='Print a list of the energies',
                    default=False, action='store_true')
parser.add_argument('-a', '--all', help='Find all files corresponding to {input} (can be a glob).',
                    action='store_true', default=False)

args = parser.parse_args()


def grab_energies(inp, units='hartree'):
    """
    Grab the energies list from the input file
    :return: [energies], completed
    """
    data = ccread(inp)
    try:
        completed = data.optdone if hasattr(data, 'optdone') else False
        if args.energy_type == 'free':
            energies = [data.freeenergy]
        else:
            energies = getattr(data, args.energy_type + 'energies')
        convert = lambda x: convertor(x, 'eV', units)
        return list(map(convert, energies)), completed

    except AttributeError as e:
        print("Invalid energy type, perhaps it hasn't been run?")
        return [0], False


if args.all:
    inputs = []
    for inp in args.input:
        inputs += glob.glob(f'**/{inp}', recursive=True)
else:
    # Find all files that match, delete duplicates
    inputs = set()
    for inp_arg in args.input:
        inputs |= set(inp for inp in glob.glob(inp_arg) if os.path.isfile(inp))
        inputs |= set(inp for inp in glob.glob(inp_arg.rstrip('/') + '/output.dat') if os.path.isfile(inp))

if len(inputs) == 0:
    print(f'Could not find input file(s) matching {args.input}')
else:
    inputs = natsorted(inputs)
    length = len(max(inputs, key=len))
    results = []
    for inp in inputs:
        energies, completed = grab_energies(inp, args.units)
        results.append([inp, energies[-1], completed])
    min_index = results.index(min(results, key=lambda x: x[1]))

    for i, (inp, energy, completed) in enumerate(results):
        print(('{:' + str(length) + 's}: {:> 15.8f} ').format(inp, energy), end='')
        print('âœ“' if completed else 'x', end='')
        if i == min_index and len(inputs) > 1:
            print(' *', end='')
        print()
    if args.list:
        print(energies)
