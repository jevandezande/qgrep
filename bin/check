#!/usr/bin/env python3

# Script that takes an output file and prints its geometry convergence results
import os
import sys
import argparse

from glob import glob
from cclib.io import ccread
from collections import OrderedDict

from natsort import natsorted

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from qgrep.convergence import Convergence, Step

parser = argparse.ArgumentParser(description='Get the geometry of an output file.')
parser.add_argument('-i', '--input', help='The file(s) to be read.',
                    type=str, nargs='+', default=['output.dat'])
parser.add_argument('-p', '--plot', help='Plot the convergence.',
                    action='store_true', default=False)
parser.add_argument('-a', '--all', help='Find all files named output.dat. If \
input is specified the search starts from that directory, otherwise the \
current directory.', action='store_true', default=False)

args = parser.parse_args()

success_dict = {
    'ORCA' : 'TOTAL RUN TIME:',
    'PSI4' : 'Buy a developer',
}


def check(inp, args):
    # Successful only if nothing fails
    success = True

    try:
        data = ccread(inp)
    except AttributeError as e:
        print('No such data available, has the program run that yet?')
        return False

    if 'package' in data.metadata:
        package = data.metadata['package']
    else:
        print(f'Failed to read {inp}')
        return False

    conv = None
    steps = []
    if (hasattr(data, 'geovalues') and hasattr(data, 'scfvalues')):
        for (delta_e, rms_grad, max_grad, rms_step, max_step), scfvalues in zip(data.geovalues, data.scfvalues):
            params = OrderedDict((
                ('delta_e', delta_e),
                ('rms_grad', rms_grad),
                ('max_grad', max_grad),
                ('rms_step', rms_step),
                ('max_step', max_step),
                ('scf_steps', len(scfvalues)),
            ))
            steps.append(Step(params, list(data.geotargets) + [0]))
        conv = Convergence(steps, data.geotargets)
        print(conv)
    else:
        print('No optimization found.')
        success = False

    if hasattr(data, 'vibfreqs'):
        im_freqs = data.vibfreqs[data.vibfreqs < 0]
        for freq in im_freqs:
            print(f'***Imaginary frequency: {freq: >7.2f}i')
            success = False
        if len(im_freqs) == 0:
            print('No imaginary frequencies')

    if args.plot and conv:
        conv.plot()

    success_value = success_dict[data.metadata['package']]
    with open(inp) as f:
        finished = False
        for line in f:
            if line[:15] == success_value:
                print('Successfully completed')
                finished = True
                break
        if not finished:
            success = False
            print('Job failed/not finished')

    return success

if args.all:
    # assume default argument and search
    path = args.input[0]
    if path == 'output.dat':
        path = '.'
    elif not os.path.isdir(path):
        raise ValueError('Input must be a path when used with --all.')
    inputs = []
    for root, dirs, files in os.walk(path):
        if 'output.dat' in files:
            inputs.append(os.path.join(root, 'output.dat'))
else:
    # Find all matches, delete duplicates
    inputs = set()
    for inp_arg in args.input:
        inputs |= set(inp for inp in glob(inp_arg) if os.path.isfile(inp))
        inputs |= set(inp for inp in glob(inp_arg + '/output.dat') if os.path.isfile(inp))

if len(inputs) == 0:
    print('Could not find input file(s)')
else:
    inputs = natsorted(inputs)
    results = []
    for inp in inputs:
        if len(inputs) > 1:
            print(inp)
        results.append(check(inp, args))
    # Print a summary if more than two inputs
    if len(inputs) > 2:
        length = len(max(inputs, key=len))
        print('\nSummary\n=======')
        for inp, res in zip(inputs, results):
            print(inp.ljust(length) + ': ' + ('âœ“' if res else 'x'))
