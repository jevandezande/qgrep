#!/usr/bin/env python3

# Reads a population analysis and outputs the leading contributors for the
# specified range of orbitals

import argparse
import importlib
import sys
sys.path.insert(0, '../')
from qgrep.helper import read
from qgrep.population.orbital_pop import ReducedOrbitalPopulation as ROP


parser = argparse.ArgumentParser(description='Get the population analysis for specified orbitals. '\
                                'When cropping and contracting, the contraction is performed first.')
parser.add_argument('-i', '--input', help='The file to be read.', type=str,
                    default='output.dat')
parser.add_argument('-n', '--number', help='The number of orbitals above and '\
                    'below the fermi level to be output.', type=int, default=2)
parser.add_argument('-c', '--crop', help='Crop the output', default=False, action='store_true')
parser.add_argument('-a', '--atom_contract', help='Contract all ao contributions on the same atom',
                    default=False, action='store_true')
parser.add_argument('-j', '--am_contract', help='Contract all of the same am contributions.',
                    default=False, action='store_true')
parser.add_argument('-s', '--sorted', help='Sort by ao_contribution.',
                    default=False, action='store_true')

args = parser.parse_args()


rop = ROP(args.input)

low = rop.homo - args.number + 1
high = rop.lumo + args.number
# Truncates the number of orbitals around the Fermi level
rop = rop.range(low, high)

# Don't contract twice
if args.atom_contract:
    rop = rop.atom_contract()
elif args.am_contract:
    rop = rop.am_contract()

if args.crop:
    rop = rop.crop()
# crop and am_contract already include sorting,
#  but am_contract does not run if atom_contract does
elif args.sorted and (not args.am_contract or args.atom_contract):
    rop = rop.sorted()

print(rop)
