#!/usr/bin/env python3

# Reads a population analysis and outputs the leading contributors for the
# specified range of orbitals

import argparse
import importlib
import sys
sys.path.insert(0, '../')
from qgrep.helper import read
from qgrep.population.orbital_pop import OrbitalPopulation as OP


parser = argparse.ArgumentParser(description='Get the population analysis for specified orbitals. '\
                                'When cropping and contracting, the contraction is performed first.')
parser.add_argument('-i', '--input', help='The file to be read.', type=str,
                    default='output.dat')
parser.add_argument('-n', '--number', help='The number of orbitals above and '\
                    'below the fermi level to be output.', type=int, default=2)
parser.add_argument('-c', '--crop', help='Crop the output', default=False, action='store_true')
parser.add_argument('-a', '--atom_contract', help='Contract all ao contributions on the same atom',
                    default=False, action='store_true')
parser.add_argument('-j', '--am_contract', help='Contract all of the same am contributions.',
                    default=False, action='store_true')
parser.add_argument('-s', '--sorted', help='Sort by ao_contribution.',
                    default=False, action='store_true')
parser.add_argument('-l', '--latex', help='Write in latex format',
                    default=False, action='store_true')
parser.add_argument('-f', '--format', help='Write in specified format, can use -l for latex',
                    type=str, default='str')
parser.add_argument('-o', '--output', help='The file to be read.', type=str,
                    default='')
parser.add_argument('-w', '--write', help='Write to an output file',
                    default=False, action='store_true')

args = parser.parse_args()


op = OP(args.input)

low = op.homo - args.number + 1
high = op.lumo + args.number
# Truncates the number of orbitals around the Fermi level
op = op.range(low, high)

# Don't contract twice
if args.atom_contract:
    op = op.atom_contract()
elif args.am_contract:
    op = op.am_contract()

if args.crop:
    op = op.crop()
# crop and am_contract already include sorting,
#  but am_contract does not run if atom_contract does
elif args.sorted and (not args.am_contract or args.atom_contract):
    op = op.sorted()

if args.write or args.output:
    out_file = args.output
    if not args.output:
        if args.latex or args.format == 'latex':
            out_file = 'mo_pop.tex'
            format = 'latex'
        elif args.format == 'csv':
            out_file = 'mo_pop.csv'
        elif args.format == 'str':
            out_file = 'mo_pop.txt'

    format = 'csv'
    if args.latex:
        format = 'latex'

    op.write(out_file, format=format)
elif args.latex:
    op.write('stdout', format='latex')
elif args.format == 'str':
    op.write('stdout', format='str')
else:
    op.write('stdout', format=args.format)

